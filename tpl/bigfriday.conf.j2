worker_processes  auto;
#error_log  logs/error.log;

events {
    worker_connections  1024;
}

http {
    include mime.types;
    sendfile {{http.sendfile|onoff}};
    #expires off;
    #tcp_nopush on;
    #tcp_nodelay on;
    #keepalive_timeout 65;

    # http server for the player and video fragments
    server {
        listen {{http.port}};
        server_name {{server_name}};
{% if http.ssl_port %}
        return 301 https://{{server_name}}:{{http.ssl_port}}$request_uri;
    }
    server {
        listen {{http.ssl_port}} ssl;
        server_name {{server_name}};
        ssl_prefer_server_ciphers on;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_stapling on;
        ssl_stapling_verify on;
        ssl_certificate {{http.ssl_certs}}/fullchain.pem;
        ssl_certificate_key {{http.ssl_certs}}/privkey.pem;
        ssl_dhparam {{http.ssl_certs}}/dhparams.pem;
        ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
{% endif %}

        ### dash start ##############################################
        {% if dash.enabled %}
        location {{dash.http.location}} {
            root {{rtmp.root}};
            autoindex {{http.autoindex|onoff}};
            add_header 'Cache-Control' 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
            expires off;
            {% if dash.http.cors %}
            # CORS setup (https://www.html5rocks.com/en/tutorials/cors/)
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length';
            # Allow CORS preflight requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            {% endif %}
        }

        {% if dash.timesync %}
        # Empty response - used by dash.js to sync with server time
        location /time {
            return 200;
        }
        {% endif %}
        {% endif %}
        ### dash end ################################################

        ### rtmp stats start ########################################
        {% if rtmp.enabled and rtmp.stats %}
        # rtmp stats
        location /stat {
            rtmp_stat all;
            rtmp_stat_stylesheet /stat.xsl;
        }
        {% endif %}
        ### rtmp stats end ##########################################

        ### hls start ###############################################
        {% if hls.enabled %}
        location {{hls.http.location}} {
            root {{rtmp.root}};
            autoindex {{http.autoindex|onoff}};
            add_header 'Cache-Control' 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
            expires off;
        }
        {% endif %}
        ### hls end #################################################

        # static html
        location / {
            autoindex {{http.autoindex|onoff}};
            root {{http.root}};
        }

}
}

{% if rtmp.enabled %}
# rtmp configuration: https://github.com/arut/nginx-rtmp-module/wiki/Directives
rtmp {
    server {
        listen {{rtmp.port}};
        chunk_size {{rtmp.chunk}};

        application {{dash.rtmp.application}} {
        {% filter align_suffix('#') %}
        # Live settings: https://github.com/arut/nginx-rtmp-module/wiki/Directives#live
        live on;     # live mode (one-to-many)
        record off;  # turn off recording to flv

        # Access settings: https://github.com/arut/nginx-rtmp-module/wiki/Directives#access
        {% for addr in rtmp.publish %}
        allow publish {{addr}};
        {% endfor %}
        deny publish all;
        {% for addr in rtmp.play %}
        allow play {{addr}};
        {% endfor %}
        deny play all;            # disable directly consuming through rtmp

        {% if dash.enabled %}
        # Dash settings: https://github.com/arut/nginx-rtmp-module/wiki/Directives#mpeg-dash
        dash {{dash.enabled|onoff}};  # enable mpeg dash
        dash_path {{rtmp.root}}{{dash.http.location}};  # dash fragments path
        dash_nested {{dash.rtmp.nested|onoff}};  # one subdirectory for each stream
        dash_fragment {{dash.rtmp.fragment}};  # length of dash fragment
        dash_playlist_length {{dash.rtmp.playlist_length}};  # length of dash playlist
        dash_cleanup {{dash.rtmp.cleanup|onoff}};  # use nginx cache manager to remove old fragments

        {% if dash.timesync %}
        # Dash time-sync (requires extra patches)
        dash_clock_compensation http_head;
        dash_clock_helper_uri https://{{server_name}}:{{http.ssl_port}}/time;
        {% endif %}
        {% endif %}
        #{#
        # Dash variants (requires extra patches)
        #dash_variant _low  bandwidth="500000"  width="640"  height="360";
        #dash_variant _med  bandwidth="1500000" width="1280"  height="720";
        #dash_variant _high bandwidth="5000000" width="1920" height="1080" max;
        #}#
        {% endfilter %}
        }

        application {{hls.rtmp.application}} {
        {% filter align_suffix('#') %}
        # Live settings: https://github.com/arut/nginx-rtmp-module/wiki/Directives#live
        live on;     # live mode (one-to-many)
        record off;  # turn off recording to flv

        # Access settings: https://github.com/arut/nginx-rtmp-module/wiki/Directives#access
        {% for addr in rtmp.publish %}
        allow publish {{addr}};
        {% endfor %}
        deny publish all;
        {% for addr in rtmp.play %}
        allow play {{addr}};
        {% endfor %}
        deny play all;            # disable directly consuming through rtmp

        {% if hls.enabled %}
        hls {{hls.enabled|onoff}};  # enable hls
        hls_path {{rtmp.root}}{{hls.http.location}};  # hls fragments path
        hls_nested {{hls.rtmp.nested|onoff}};  # one subdirectory for each stream
        {% endif %}
        {% endfilter %}
        }
    }
}
{% endif %}

# vim: set et noai ts=4 sw=4:
