worker_processes  auto;
{% if nginx.rtmp.enabled %}
rtmp_auto_push {{nginx.rtmp.auto_push|onoff}};
{% endif %}
{#error_log  logs/error.log;#}

events {
    worker_connections  1024;
}

http {
    include mime.types;
    sendfile {{nginx.http.sendfile|onoff}};
    #{#expires off;
    #tcp_nopush on;
    #tcp_nodelay on;
    #keepalive_timeout 65;
    #}#

    {% if nginx.ports.https %}
    # redirect http requests to https
    server {
        listen {{nginx.ports.http}};
        server_name {{nginx.server_name}};
        return 301 https://{{nginx.server_name}}:{{nginx.ports.https}}$request_uri;
    }
    {% endif %}
    # serve static content and video fragments
    server {
        {% if nginx.ports.https %}
        listen {{nginx.ports.https}} ssl;
        server_name {{nginx.server_name}};
        ssl_prefer_server_ciphers on;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_stapling on;
        ssl_stapling_verify on;
        ssl_certificate {{nginx.http.certs}}/fullchain.pem;
        ssl_certificate_key {{nginx.http.certs}}/privkey.pem;
        ssl_dhparam {{nginx.http.certs}}/dhparams.pem;
        ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
        {% else %}
        listen {{nginx.ports.http}};
        server_name {{nginx.server_name}};
        {% endif %}

        {% if nginx.dash.enabled %}
        ### dash start ##############################################
        location /{{nginx.dash.location}} {
            root {{nginx.rtmp.root}};
            autoindex {{nginx.http.autoindex|onoff}};
            add_header 'Cache-Control' 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
            expires off;
            {% if nginx.dash.cors %}
            # CORS setup (https://www.html5rocks.com/en/tutorials/cors/)
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length';
            # Allow CORS preflight requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            {% endif %}
        }
        ### dash end ################################################
        {% endif %}

        {% if nginx.hls.enabled %}
        ### hls start ###############################################
        location /{{nginx.hls.location}} {
            root {{nginx.rtmp.root}};
            autoindex {{nginx.http.autoindex|onoff}};
            add_header 'Cache-Control' 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
            expires off;
            {% if nginx.hls.cors %}
            # CORS setup (https://www.html5rocks.com/en/tutorials/cors/)
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length';
            # Allow CORS preflight requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            {% endif %}
        }
        ### hls end #################################################
        {% endif %}

        {% if nginx.rtmp.enabled and nginx.rtmp.stats %}
        ### rtmp stats start ########################################
        location /stat {
            rtmp_stat all;
            rtmp_stat_stylesheet /stat.xsl;
        }
        ### rtmp stats end ##########################################
        {% endif %}

        ### static content start ####################################
        location / {
            autoindex {{nginx.http.autoindex|onoff}};
            root {{nginx.http.root}};{# can this be absolute? #}
        }
        ### static content end ######################################
    }
}

{% if nginx.rtmp.enabled %}
# rtmp configuration: https://github.com/arut/nginx-rtmp-module/wiki/Directives
rtmp {
    server {
        listen {{nginx.ports.rtmp}};
        chunk_size {{nginx.rtmp.chunk}};

        {% filter align_suffix('#') %}
        application {{nginx.rtmp.application}} {
            # Live settings: https://github.com/arut/nginx-rtmp-module/wiki/Directives#live
            live on;  # live mode (one-to-many)
            record off;  # turn off recording to flv

            # Access settings: https://github.com/arut/nginx-rtmp-module/wiki/Directives#access
            {% for addr in nginx.rtmp.publish %}
            allow publish {{addr}};
            {% endfor %}
            deny publish all;
            {% for addr in nginx.rtmp.play %}
            allow play {{addr}};
            {% endfor %}
            deny play all; # disable directly consuming through rtmp

            {% if nginx.dash.enabled %}
            ### rtmp dash start #########################################
            # Dash settings: https://github.com/arut/nginx-rtmp-module/wiki/Directives#mpeg-dash
            dash {{nginx.dash.enabled|onoff}};  # enable mpeg dash
            dash_path {{nginx.rtmp.root}}/{{nginx.dash.location}};  # dash fragments path
            dash_nested {{nginx.dash.nested|onoff}};  # one subdirectory for each stream
            dash_fragment {{nginx.dash.fragment}};  # length of dash fragment in sec
            dash_playlist_length {{nginx.dash.playlist_length}};  # length of dash playlist in sec
            dash_cleanup {{nginx.dash.cleanup|onoff}};  # use nginx cache manager to remove old fragments
            ### rtmp dash end ###########################################
            {% endif %}

            {% if nginx.dash.enabled %}
            ### rtmp hls start ##########################################
            # hls settings: https://github.com/arut/nginx-rtmp-module/wiki/Directives#hls
            hls {{nginx.hls.enabled|onoff}};  # enable hls
            hls_path {{nginx.rtmp.root}}/{{nginx.hls.location}};  # hls fragments path
            hls_nested {{nginx.hls.nested|onoff}};  # one subdirectory for each stream
            hls_fragment {{nginx.hls.fragment}};  # length of hls fragment in sec
            hls_playlist_length {{nginx.hls.playlist_length}};  # length of hls playlist in sec
            hls_cleanup {{nginx.hls.cleanup|onoff}};  # use nginx cache manager to remove old fragments
            #### rtmp hls end ###########################################
            {% endif %}
        }
        {% endfilter %}
    }
}
{% endif %}

# vim: set et noai ts=4 sw=4:
